// server.js (fragmento modificado)
const axios = require('axios');
const FormData = require('form-data');

app.post('/whatsapp', async (req, res) => {
  try {
    const numMedia = parseInt(req.body.NumMedia || '0');
    let userMsg = req.body.Body;
    const from = req.body.From;

    // Si hay un archivo adjunto (audio)
    if (numMedia > 0) {
      const mediaType = req.body.MediaContentType0; // e.g. 'audio/ogg'
      if (mediaType.includes('audio')) {
        // 1. Descargar el audio
        const mediaUrl = req.body.MediaUrl0;
        const audioBuffer = await axios.get(mediaUrl, { responseType: 'arraybuffer' });

        // 2. Llamar a Whisper
        // 2.1 Crear form data
        const formData = new FormData();
        formData.append('file', Buffer.from(audioBuffer.data), {
          filename: 'audio.ogg', // o el nombre que quieras
          contentType: mediaType
        });
        formData.append('model', 'whisper-1');
        
        const whisperResponse = await axios.post(
          'https://api.openai.com/v1/audio/transcriptions',
          formData,
          {
            headers: {
              'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,
              'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            }
          }
        );
        
        // 2.2. Extraer la transcripción
        userMsg = whisperResponse.data.text || '(No se pudo transcribir el audio)';
      }
    }

    // Ahora userMsg contiene el texto (ya sea el original o la transcripción)
    // Llamar a ChatGPT con el texto
    const response = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        { role: 'system', content: 'Eres un asistente virtual en WhatsApp.' },
        { role: 'user', content: userMsg }
      ]
    });

    const gptAnswer = response.data.choices[0].message.content;

    // Responder vía Twilio
    const twilioResponse = new twilio.twiml.MessagingResponse();
    twilioResponse.message(gptAnswer);

    res.set('Content-Type', 'text/xml');
    res.send(twilioResponse.toString());

  } catch (error) {
    console.error(error);
    res.status(500).send('Error interno');
  }
});